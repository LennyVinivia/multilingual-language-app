generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mongodb"
    url          = "mongodb+srv://lennyruprechthtc:Secure1234@cluster0.stm3k.mongodb.net/multilingual-language?retryWrites=true&w=majority"
    relationMode = "prisma"
}

type CategoriesSubcategories {
    id          String @map("_id") @db.ObjectId
    description String
    name        String
}

type ExercisesMetadata {
    date DateTime? @db.Date
    tags String[]
}

type WordsAdditionalInfo {
    definition String
    phonetics  String
    prefix     String
    root       String
    structure  String
}

model Authenticator {
    id           String @id @default(auto()) @map("_id") @db.ObjectId
    /// Field referred in an index, but found no data to define the type.
    credentialID Json?  @unique
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    // Relation
    user User @relation(fields: [userId], references: [id])
}

model User {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    email     String  @unique
    username  String  @unique
    firstname String?
    lastname  String?
    password  String?

    Session Session[]

    Account Account[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    provider          String
    providerAccountId String
    type              String
    access_token      String?
    refresh_token     String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
}

model categories {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    description   String
    language_id   String                    @db.ObjectId
    name          String
    subcategories CategoriesSubcategories[]
    type          String
}

model exercises {
    id             String             @id @default(auto()) @map("_id") @db.ObjectId
    category_id    String             @db.ObjectId
    correct_answer String
    example        String?
    examples       String[]
    exercise_type  String
    explanation    String?
    language_id    String             @db.ObjectId
    metadata       ExercisesMetadata?
    options        String[]
    question       String
    related_verb   String?
    source         String?
    /// Could not determine type: the field only had null or empty values in the sample set.
    subcategory_id Json?
}

model languages {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String
}

model words {
    id              String              @id @default(auto()) @map("_id") @db.ObjectId
    additional_info WordsAdditionalInfo
    category_id     String              @db.ObjectId
    examples        String[]
    language_id     String              @db.ObjectId
    subcategory_id  String?             @db.ObjectId
    /// Could not determine type: the field only had null or empty values in the sample set.
    translations    Json?
    type            String
    word            String
}
